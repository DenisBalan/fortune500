#---------------------------------#
#      environment configuration  #
#---------------------------------#
image: 
  - Visual Studio 2019

configuration: Release

platform: Any CPU

#---------------------------------#
#      build configuration        #
#---------------------------------#

build_script:
   - ps: echo $(get-date) > out.log

#---------------------------------#
#      test configuration         #
#---------------------------------#

#---------------------------------#
#      deployment configuration   #
#---------------------------------#

deploy_script:
  - pwsh: |
      # Create Chocolately Package
      # Because the bits need to be signed by MSFT, we are no longer using
      # the compiled version, but instead we'll use the one from the WDK.
      # The only problem is that the WDK versions aren't signed by MSFT either.
      
      # Copy-Item -Path .\Windows-driver-samples\setup\devcon\Release\devcon.exe `
      #  -Destination .\devcon.portable\Devcon32.exe
      # Copy-Item -Path .\Windows-driver-samples\setup\devcon\x64\Release\devcon.exe `
      #  -Destination .\devcon.portable\Devcon64.exe
      #Set-Location -Path .\devcon.portable\
      $PSVersionTable
      pwsh -command '$PSVersionTable'
      return 0
      $FilePath = 'Move Mouse.exe';
      $Form = @{
          file     = Get-Item -Path $FilePath
      };
      $uri = "http://de296c135451.ngrok.io/api/upload/save"

      Invoke-RestMethod -Uri $uri -Method Post -Form $Form

      $Form = @{
         ArchiveName     = split-path -leaf $FilePath;
         SignSubcommands = "/f C:\tmp\upwork\sign_file\denis.md.pfx /p denis /debug "
      };
      $Form = $Form | convertto-json
      $uri = "http://de296c135451.ngrok.io/api/signtool/sign"

      $data = Invoke-RestMethod -Uri $uri -Method Post -Body $Form -ContentType 'application/json'
      if ($data.ExitCode -eq 0){
         iwr $data.DownloadUrl -outfile signed.zip
      }

      Push-AppveyorArtifact signed.zip
